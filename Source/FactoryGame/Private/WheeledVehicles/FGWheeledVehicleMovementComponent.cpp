// This file has been automatically generated by the Unreal Header Implementation tool

#include "WheeledVehicles/FGWheeledVehicleMovementComponent.h"

FFGSimpleEngineSim::FFGSimpleEngineSim(const Chaos::FSimpleEngineConfig* StaticDataIn):FSimpleEngineSim(StaticDataIn){ }
FFGSimpleTransmissionSim::FFGSimpleTransmissionSim(const Chaos::FSimpleTransmissionConfig* SetupIn):FSimpleTransmissionSim(SetupIn){ }

FFGSimpleEngineSim::~FFGSimpleEngineSim(){ }
void FFGSimpleEngineSim::Simulate(float DeltaTime){ }
FFGSimpleTransmissionSim::~FFGSimpleTransmissionSim(){ }
void FFGSimpleTransmissionSim::SetGear(int32 InGear, bool Immediate){ }
void FFGSimpleTransmissionSim::Simulate(float DeltaTime){ }
void UFGWheeledVehicleSimulation::PerformSuspensionTraces(const TArray<Chaos::FSuspensionTrace>& SuspensionTrace, FCollisionQueryParams& TraceParams, FCollisionResponseContainer& CollisionResponse, TArray<FWheelTraceParams>& WheelTraceParams){ }
void UFGWheeledVehicleSimulation::ProcessMechanicalSimulation(float DeltaTime){ }
void UFGWheeledVehicleMovementComponent::PreTickGT(float DeltaTime){ }
void UFGWheeledVehicleMovementComponent::SetupVehicle(TUniquePtr<Chaos::FSimpleWheeledVehicle>& PVehicle){ }
void UFGWheeledVehicleMovementComponent::CreateWheels(){ }
void UFGWheeledVehicleMovementComponent::UpdateSignificance(bool isSignificant){ }
void UFGWheeledVehicleMovementComponent::SetHasDriver(bool hasDriver, bool isLocalDriver){ }
void UFGWheeledVehicleMovementComponent::HandleEngineSounds(const bool hasFuel){ }
UParticleSystem* UFGWheeledVehicleMovementComponent::GetSurfaceParticleSystem(UPhysicalMaterial* PhysMat){ return nullptr; }
void UFGWheeledVehicleMovementComponent::OnGearChangedImmediate_Implementation(int32 NewGear){ }
void UFGWheeledVehicleMovementComponent::OnGearChangeBegin_Implementation(int32 NewGear){ }
void UFGWheeledVehicleMovementComponent::OnGearChangeEnd_Implementation(int32 NewGear){ }
void UFGWheeledVehicleMovementComponent::SetClientInputsOnDriverLeave(){ }
void UFGWheeledVehicleMovementComponent::PlayStartupEngineAudio(){ }
void UFGWheeledVehicleMovementComponent::PlayShutDownEngineAudio(const bool isOutOfFuel){ }
void UFGWheeledVehicleMovementComponent::Server_PlayShutDownEngineAudio_Implementation(const bool isOutOfFuel){ }
void UFGWheeledVehicleMovementComponent::Server_PlayStartupEngineAudio_Implementation(){ }
void UFGWheeledVehicleMovementComponent::UpdateState(float DeltaTime){ }
void UFGWheeledVehicleMovementComponent::ProcessSleeping(const FControlInputs& ControlInputs){ }
void UFGWheeledVehicleMovementComponent::UpdateAudioPositions(UAkComponent* audioComp){ }
float UFGWheeledVehicleMovementComponent::GetLargestTireLoadValue(){ return float(); }
float UFGWheeledVehicleMovementComponent::GetLargestSlipMagnitude(){ return float(); }
float UFGWheeledVehicleMovementComponent::GetLargestSkidMagnitude(){ return float(); }
void UFGWheeledVehicleMovementComponent::ReCreateSoundComponents(){ }
void UFGWheeledVehicleMovementComponent::DeleteSoundComponents(){ }
void UFGWheeledVehicleMovementComponent::UpdateAirStatus(){ }
void UFGWheeledVehicleMovementComponent::UpdateTireEffects(){ }
void UFGWheeledVehicleMovementComponent::UpdateTireAudio(){ }
