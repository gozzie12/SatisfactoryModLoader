// This file has been automatically generated by the Unreal Header Implementation tool

#include "Representation/FGResourceNodeRepresentation.h"

UFGResourceNodeRepresentation::UFGResourceNodeRepresentation() : Super() {
	this->mResourceNode = nullptr;
	this->mIsStatic = true;
	this->mShouldShowOnMap = true;
}
void UFGResourceNodeRepresentation::SetupActorRepresentation(AActor* realActor, bool isLocal, float lifeSpan){ }
UMaterialInterface* UFGResourceNodeRepresentation::GetRepresentationCompassMaterial() const{ return nullptr; }
float UFGResourceNodeRepresentation::GetCompassHeightAlignment() const{ return float(); }
bool UFGResourceNodeRepresentation::NeedsDynamicCompassRepresentationText() const{ return bool(); }
FText UFGResourceNodeRepresentation::GetDynamicCompassRepresentationText(APlayerController* ownerPlayerController, float distanceToPlayer) const{ return FText(); }
bool UFGResourceNodeRepresentation::NeedsDynamicCompassRepresentationScale() const{ return bool(); }
float UFGResourceNodeRepresentation::CalculateCompassRepresentationScale(APlayerController* ownerPlayerController, float distanceToPlayer) const{ return float(); }
void UFGResourceNodeRepresentation::UpdateRepresentationCompassMaterial(UMaterialInstanceDynamic* compassMaterialInstance, APlayerController* ownerPlayerController) const{ }
UMaterialInterface* UFGResourceNodeRepresentation::GetRepresentationCompassEffectMaterial() const{ return nullptr; }
FVector2f UFGResourceNodeRepresentation::GetRepresentationCompassEffectSize() const{ return FVector2f(); }
bool UFGResourceNodeRepresentation::UpdateRepresentationCompassEffectMaterial(UMaterialInstanceDynamic* compassMaterialInstance, APlayerController* ownerPlayerController, float distanceToPlayer, float totalTime){ return bool(); }
bool UFGResourceNodeRepresentation::IsImportantCompassRepresentation() const{ return bool(); }
bool UFGResourceNodeRepresentation::GetShouldShowOnMap() const{ return bool(); }
void UFGResourceNodeRepresentation::SetupResourceNodeRepresentation( AFGResourceNodeBase* resourceNode){ }
bool UFGResourceNodeRepresentation::IsCluster() const{ return bool(); }
bool UFGResourceNodeRepresentation::IsOccupied() const{ return bool(); }
