// This file has been automatically generated by the Unreal Header Implementation tool

#include "Tests/FGTestBlueprintFunctionLibrary.h"

AFGBuildable* UFGTestBlueprintFunctionLibrary::SpawnBuildableFromClass(TSubclassOf<AFGBuildable> buildableClass, const FTransform& transform, UObject* worldContext, UFGBuildableSpawnStrategy* spawnStrategy){ return nullptr; }
bool UFGTestBlueprintFunctionLibrary::SpawnBlueprintFromDescriptor(UFGBlueprintDescriptor* blueprintDescriptor, const FTransform& transform, UObject* worldContext, TArray<UFGBuildableSpawnStrategy*> spawnStrategies, TArray<AFGBuildable*>& out_buildables){ return bool(); }
bool UFGTestBlueprintFunctionLibrary::SpawnUniformGridOfBuildables(TSubclassOf<AFGBuildable> buildableClass, const FTransform& transform, int32 gridSizeX, int32 gridSizeY, UObject* worldContext, TArray<AFGBuildable*>& out_buildables, UFGBuildableSpawnStrategy* spawnStrategy , float spacingX , float spacingY){ return bool(); }
bool UFGTestBlueprintFunctionLibrary::SpawnUniformGridOfBlueprints(UFGBlueprintDescriptor* blueprintDescriptor, const FTransform& transform, int32 gridSizeX, int32 gridSizeY, UObject* worldContext, TArray<AFGBuildable*>& out_buildables, TArray<UFGBuildableSpawnStrategy*> spawnStrategies, float spacingX , float spacingY){ return bool(); }
AFGBuildable* UFGTestBlueprintFunctionLibrary::SpawnSplineBuildable(TSubclassOf<AFGBuildable> buildableClass, UFGConnectionComponent* fromConnection, UFGConnectionComponent* toConnection, UFGBuildableSpawnStrategy_Spline* customSplineStrategy){ return nullptr; }
void UFGTestBlueprintFunctionLibrary::MakeConnectionBetweenComponents(UFGConnectionComponent* connection0, UFGConnectionComponent* connection1){ }
FVector UFGTestBlueprintFunctionLibrary::EstimateBuildableBounds(const FTransform& originTransform, TSubclassOf<AFGBuildable> buildableClass){ return FVector(); }
FVector UFGTestBlueprintFunctionLibrary::DetermineBlueprintBounds(const FTransform& originTransform, UFGBlueprintDescriptor* blueprintDescriptor, UObject* worldContext){ return FVector(); }
