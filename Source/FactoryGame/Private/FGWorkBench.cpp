// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGWorkBench.h"
#include "Net/UnrealNetwork.h"

UFGWorkBench::UFGWorkBench() : Super() {
	this->mCurrentRecipe = nullptr;
	this->mCurrentManufacturingProgress = 0.0;
	this->mManufacturingSpeed = 0.8;
	this->mPlayerWorkingAtBench = nullptr;
	this->mRecipeRate = 0.0;
	this->mIsProducing = false;
	this->mInventory = nullptr;
	this->mFatigueMultiplier = 0.2;
	this->mFatigueDecreaseSpeedMultiplier = 3.0;
	this->mHoldProduceTime = 0.2;
	this->mManufacturingButton = nullptr;
	this->mFatigueUpdaterInterval = 10;
	this->mRecipeProducerItemDescriptor = nullptr;
	this->mRecipeDuration = 0.0;
	this->mCooldownDelay = 1.5;
	this->mIsFatigueEnabled = true;
	this->SetIsReplicatedByDefault(true);
	this->bAutoActivate = true;
}
void UFGWorkBench::GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const {
	Super::GetLifetimeReplicatedProps(OutLifetimeProps);
	DOREPLIFETIME(UFGWorkBench, mPlayerWorkingAtBench);
}
void UFGWorkBench::TickComponent(float DeltaTime, enum ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction){ }
TSubclassOf<UFGItemDescriptor> UFGWorkBench::GetRecipeProducerItemDescriptor_Implementation(UObject* WorldContext) const{ return TSubclassOf<UFGItemDescriptor>(); }
void UFGWorkBench::TickProducing(float dt){ }
void UFGWorkBench::SetRecipe(TSubclassOf<  UFGRecipe > recipe){ }
bool UFGWorkBench::CanProduce(TSubclassOf< UFGRecipe > recipe, UFGInventoryComponent* inventory) const{ return bool(); }
bool UFGWorkBench::HasAuthority() const{ return bool(); }
bool UFGWorkBench::IsProducing(){ return bool(); }
void UFGWorkBench::Produce(float dt){ }
void UFGWorkBench::SetInventory( UFGInventoryComponent* newInventory){ }
UFGInventoryComponent* UFGWorkBench::GetPlayerInventory() const{ return nullptr; }
UFGInventoryComponent* UFGWorkBench::GetInventory() const{ return nullptr; }
void UFGWorkBench::SetWorkBenchUser( AFGCharacterPlayer*  newUser){ }
void UFGWorkBench::RemoveIngredientsAndAwardRewards(UFGInventoryComponent* inventory, TSubclassOf<  UFGRecipe > recipe){ }
void UFGWorkBench::UpdateFatigueMultiplier(bool useLeftOvers){ }
void UFGWorkBench::SetupManufacturingButton( UFGManufacturingButton* inButton){ }
float UFGWorkBench::GetRecipeFatigueMultiplier(){ return float(); }
