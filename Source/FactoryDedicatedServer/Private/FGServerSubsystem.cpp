// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGServerSubsystem.h"

UFGServerSubsystem::UFGServerSubsystem(){ }
bool UFGServerSubsystem::ShouldCreateSubsystem(UObject* Outer) const{ return bool(); }
void UFGServerSubsystem::Initialize(FSubsystemCollectionBase& Collection){ }
void UFGServerSubsystem::Deinitialize(){ }
bool UFGServerSubsystem::Tick(float DeltaTime){ return bool(); }
bool UFGServerSubsystem::AttemptAutoLoadMostRecentSession(){ return bool(); }
UFGDedicatedServerGameModeComponentInterface* UFGServerSubsystem::MakeGameModeComponent(AFGGameMode* GameMode) const{ return nullptr; }
USessionMigrationSequence* UFGServerSubsystem::CreateSession(const FCommonSessionCreationSettings& SessionCreationSettings){ return nullptr; }
FEncryptionKeyResponse UFGServerSubsystem::GenerateEncryptionKey(const FString& EncryptionToken){ return FEncryptionKeyResponse(); }
EEncryptionFailureAction UFGServerSubsystem::IsEncryptionRequired() const{ return EEncryptionFailureAction(); }
bool UFGServerSubsystem::ShouldEncryptJoinRequests() const{ return bool(); }
UFGServerSubsystem* UFGServerSubsystem::Get(const UObject* WorldContext){ return nullptr; }
FString UFGServerSubsystem::GetServerName() const{ return FString(); }
bool UFGServerSubsystem::IsServerClaimed() const{ return bool(); }
void UFGServerSubsystem::ClaimServer(const FString& ServerName, const FString& AdminPassword) const{ }
void UFGServerSubsystem::SetServerName(const FString& ServerName) const{ }
void UFGServerSubsystem::SetAutoLoadSessionName(const FString& SessionName) const{ }
void UFGServerSubsystem::SetAdminPassword(const FString& PlainTextPassword) const{ }
void UFGServerSubsystem::SetClientPassword(const FString& PlainTextPassword) const{ }
EPrivilegeLevel UFGServerSubsystem::CheckPasswordInUse(const FString& PlainTextPassword, EPrivilegeLevel IgnoredPrivilegeLevel) const{ return EPrivilegeLevel(); }
void UFGServerSubsystem::SetCertificateData(const FFGGeneratedCertificateData& NewCertificateData) const{ }
FServerAuthenticationToken UFGServerSubsystem::GenerateAuthenticationToken(EPrivilegeLevel PrivilegeLevel, UE::Online::FAccountId Player) const{ return FServerAuthenticationToken(); }
FServerAuthenticationToken UFGServerSubsystem::AuthenticatePlayer(const FString& PlainTextPassword, EPrivilegeLevel MinimumTargetPrivilege, UE::Online::FAccountId Player) const{ return FServerAuthenticationToken(); }
FServerAuthenticationToken UFGServerSubsystem::AttemptPasswordlessLogin(EPrivilegeLevel MinimumPrivilegeLevel, UE::Online::FAccountId Player) const{ return FServerAuthenticationToken(); }
bool UFGServerSubsystem::VerifyAuthToken(const FServerAuthenticationToken& Cookie, UE::Online::FAccountId Player) const{ return bool(); }
bool UFGServerSubsystem::VerifyGameTicket(const FServerEntryToken& Ticket, UE::Online::FAccountId Player) const{ return bool(); }
void UFGServerSubsystem::GenerateNewAPITokenSeed() const{ }
FServerAuthenticationToken UFGServerSubsystem::GenerateNewServerAPIToken() const{ return FServerAuthenticationToken(); }
FServerEntryToken UFGServerSubsystem::IssueTicket(UE::Online::FAccountId Player, TSharedPtr<const FInternetAddr> PlayerAddr, EPrivilegeLevel Privilege) const{ return FServerEntryToken(); }
void UFGServerSubsystem::SetServerFlag(EServerFlags ServerFlags){ }
void UFGServerSubsystem::ClearServerFlag(EServerFlags ServerFlags){ }
void UFGServerSubsystem::IncrementSubStateVersion(EServerSubStateId ServerSubStateId){ }
FString UFGServerSubsystem::GetAutoLoadSessionName() const{ return FString(); }
FServerGameState UFGServerSubsystem::GetServerGameState() const{ return FServerGameState(); }
FFGGeneratedCertificateData UFGServerSubsystem::GetCertificateData() const{ return FFGGeneratedCertificateData(); }
bool UFGServerSubsystem::CanReclaimSocket() const{ return bool(); }
FUniqueSocket UFGServerSubsystem::ReclaimServerQuerySocket(){ return FUniqueSocket(); }
void UFGServerSubsystem::ClaimServerQuerySocket(FUniqueSocket&& NetDriverSocket){ }
void UFGServerSubsystem::OnUserOptionChanged(FString OptionName, FVariant OptionValue){ }
void UFGServerSubsystem::OnSaveCollectionChanged(){ }
void UFGServerSubsystem::ShutdownServerQuerySocket(){ }
void UFGServerSubsystem::SaveSettings() const{ }
void UFGServerSubsystem::LoadSettings(){ }
FString UFGServerSubsystem::HashDataWithServerSecret(const TArray<uint8>& InData) const{ return FString(); }
TArray<uint8> UFGServerSubsystem::HashDataWithServerSecret(const  evp_md_st* InMessageDigest, const TArray<uint8>& InData) const{ return TArray<uint8>(); }
FFGStoredPasswordData UFGServerSubsystem::CreatePasswordData(const FString& PlainTextPassword) const{ return FFGStoredPasswordData(); }
bool UFGServerSubsystem::ValidatePasswordData(const FFGStoredPasswordData& PasswordData, const FString& PlainTextPassword) const{ return bool(); }
