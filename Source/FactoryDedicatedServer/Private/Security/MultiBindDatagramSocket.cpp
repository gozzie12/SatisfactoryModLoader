// This file has been automatically generated by the Unreal Header Implementation tool

#include "Security/MultiBindDatagramSocket.h"

FMultiBindDatagramSocket::FMultiBindDatagramSocket(const FString& InSocketDescription){ }
FMultiBindDatagramSocket::~FMultiBindDatagramSocket(){ }
void FMultiBindDatagramSocket::AddUnderlyingSocket(FUniqueSocket&& NewSocket){ }
void FMultiBindDatagramSocket::SetSocketToTransferDataToOnClose(FMultiBindDatagramSocket* NewSocket){ }
void FMultiBindDatagramSocket::TransferDataToSocket(FMultiBindDatagramSocket* SocketToTransferTo){ }
bool FMultiBindDatagramSocket::Shutdown(ESocketShutdownMode Mode){ return bool(); }
bool FMultiBindDatagramSocket::Close(){ return bool(); }
bool FMultiBindDatagramSocket::Bind(const FInternetAddr& Addr){ return bool(); }
bool FMultiBindDatagramSocket::Connect(const FInternetAddr& Addr){ return bool(); }
bool FMultiBindDatagramSocket::Listen(int32 MaxBacklog){ return bool(); }
bool FMultiBindDatagramSocket::WaitForPendingConnection(bool& bHasPendingConnection, const FTimespan& WaitTime){ return bool(); }
bool FMultiBindDatagramSocket::HasPendingData(uint32& PendingDataSize){ return bool(); }
FSocket* FMultiBindDatagramSocket::Accept(const FString& InSocketDescription){ return nullptr; }
FSocket* FMultiBindDatagramSocket::Accept(FInternetAddr& OutAddr, const FString& InSocketDescription){ return nullptr; }
bool FMultiBindDatagramSocket::SendTo(const uint8* Data, int32 Count, int32& BytesSent, const FInternetAddr& Destination){ return bool(); }
bool FMultiBindDatagramSocket::Send(const uint8* Data, int32 Count, int32& BytesSent){ return bool(); }
bool FMultiBindDatagramSocket::RecvFrom(uint8* Data, int32 BufferSize, int32& BytesRead, FInternetAddr& Source, ESocketReceiveFlags::Type Flags){ return bool(); }
bool FMultiBindDatagramSocket::Recv(uint8* Data,int32 BufferSize,int32& BytesRead, ESocketReceiveFlags::Type Flags){ return bool(); }
bool FMultiBindDatagramSocket::Wait(ESocketWaitConditions::Type Condition, FTimespan WaitTime){ return bool(); }
ESocketConnectionState FMultiBindDatagramSocket::GetConnectionState(){ return ESocketConnectionState(); }
void FMultiBindDatagramSocket::GetAddress(FInternetAddr& OutAddr){ }
bool FMultiBindDatagramSocket::GetPeerAddress(FInternetAddr& OutAddr){ return bool(); }
bool FMultiBindDatagramSocket::SetNonBlocking(bool bIsNonBlocking){ return bool(); }
bool FMultiBindDatagramSocket::SetNoDelay(bool bIsNoDelay){ return bool(); }
bool FMultiBindDatagramSocket::SetBroadcast(bool bAllowBroadcast){ return bool(); }
bool FMultiBindDatagramSocket::JoinMulticastGroup(const FInternetAddr& GroupAddress){ return bool(); }
bool FMultiBindDatagramSocket::JoinMulticastGroup(const FInternetAddr& GroupAddress, const FInternetAddr& InterfaceAddress){ return bool(); }
bool FMultiBindDatagramSocket::LeaveMulticastGroup(const FInternetAddr& GroupAddress){ return bool(); }
bool FMultiBindDatagramSocket::LeaveMulticastGroup(const FInternetAddr& GroupAddress, const FInternetAddr& InterfaceAddress){ return bool(); }
bool FMultiBindDatagramSocket::SetMulticastLoopback(bool bLoopback){ return bool(); }
bool FMultiBindDatagramSocket::SetMulticastTtl(uint8 TimeToLive){ return bool(); }
bool FMultiBindDatagramSocket::SetMulticastInterface(const FInternetAddr& InterfaceAddress){ return bool(); }
bool FMultiBindDatagramSocket::SetReuseAddr(bool bAllowReuse){ return bool(); }
bool FMultiBindDatagramSocket::SetLinger(bool bShouldLinger , int32 Timeout){ return bool(); }
bool FMultiBindDatagramSocket::SetRecvErr(bool bUseErrorQueue){ return bool(); }
bool FMultiBindDatagramSocket::SetSendBufferSize(int32 Size,int32& NewSize){ return bool(); }
bool FMultiBindDatagramSocket::SetReceiveBufferSize(int32 Size,int32& NewSize){ return bool(); }
int32 FMultiBindDatagramSocket::GetPortNo(){ return int32(); }
bool FMultiBindDatagramSocket::SetIpPktInfo(bool bEnable){ return bool(); }
bool FMultiBindDatagramSocket::RecvFromWithPktInfo(uint8* Data, int32 BufferSize, int32& BytesRead, FInternetAddr& Source, FInternetAddr& Destination, ESocketReceiveFlags::Type Flags){ return bool(); }
int32 FMultiBindDatagramSocket::WaitForBSDSocketStateMulti(bool bWaitForRead, FTimespan WaitTime){ return int32(); }
void FMultiBindDatagramSocket::MoveSocketsToNewInstance(FMultiBindDatagramSocket* NewSocketInstance){ }
