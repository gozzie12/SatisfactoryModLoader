// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGServerObject.h"

UFGServerObject::UFGServerObject(){ }
void UFGServerObject::EnumerateSessions(const FOnSaveManagerEnumerateSessionsComplete& CompleteDelegate){ }
bool UFGServerObject::IsEnumeratingLocalSaves() const{ return bool(); }
bool UFGServerObject::IsSaveManagerAvailable() const{ return bool(); }
void UFGServerObject::DeleteSaveFile(const FSaveHeader& SaveGame, FOnSaveMgrInterfaceDeleteSaveGameComplete CompleteDelegate){ }
void UFGServerObject::DeleteSaveSession(const FSessionSaveStruct& Session, FOnSaveMgrInterfaceDeleteSaveGameComplete CompleteDelegate){ }
USessionMigrationSequence* UFGServerObject::LoadSaveFile(const FSaveHeader& SaveGame, const FLoadSaveFileParameters& LoadSaveFileParameters, APlayerController* Player){ return nullptr; }
USessionMigrationSequence* UFGServerObject::CreateNewGame(const FString& SessionName, const FSoftObjectPath& MapAssetName, const FCreateNewGameParameters& CreateNewGameParameters, APlayerController* Player){ return nullptr; }
void UFGServerObject::SaveGame(const FString& SaveName, FOnSaveMgrInterfaceSaveGameComplete CompleteDelegate){ }
void UFGServerObject::UploadSave(const FSaveHeader& Save, FOnSaveManagerTransferCompleted CompleteDelegate, FOnSaveManagerTransferProgress ProgressDelegate){ }
void UFGServerObject::DownloadSave(const FSaveHeader& SaveGame, FOnSaveManagerTransferCompleted CompleteDelegate, FOnSaveManagerTransferProgress ProgressDelegate){ }
bool UFGServerObject::IsTransferInProgress() const{ return bool(); }
bool UFGServerObject::SupportsOnlineSettings() const{ return bool(); }
TScriptInterface<IFGOptionInterface> UFGServerObject::GetServerOptionsInterface() const{ return TScriptInterface<IFGOptionInterface>(); }
TScriptInterface<IFGOptionInterface> UFGServerObject::GetAdvancedGameSettingsInterface() const{ return TScriptInterface<IFGOptionInterface>(); }
TScriptInterface<IFGAdvancedGameSettingsInterface> UFGServerObject::GetNewGameAdvancedGameSettings() const{ return TScriptInterface<IFGAdvancedGameSettingsInterface>(); }
bool UFGServerObject::IsServerAPIAvailableAndCompatible() const{ return bool(); }
bool UFGServerObject::CanCallServerAPI(EPrivilegeLevel MinPrivilegeLevel) const{ return bool(); }
bool UFGServerObject::IsAuthenticationTokenValid(EPrivilegeLevel MinPrivilegeLevel) const{ return bool(); }
bool UFGServerObject::AttemptServerAPIConnection(){ return bool(); }
void UFGServerObject::Authenticate(EPrivilegeLevel MinimumTargetedPrivilege, bool bAutomaticLogin){ }
void UFGServerObject::ConsoleCommand(const FString& Command){ }
bool UFGServerObject::Join(){ return bool(); }
void UFGServerObject::PromptChangeServerName(){ }
void UFGServerObject::ChangeServerName(const FString& NewServerName){ }
void UFGServerObject::SetAutoLoadSessionName(const FString& SessionName){ }
void UFGServerObject::ChangeClientPassword(){ }
void UFGServerObject::ChangeAdminPassword(){ }
void UFGServerObject::FetchGameState(){ }
void UFGServerObject::FetchServerOptions(){ }
void UFGServerObject::FetchAdvancedGameSettings(){ }
void UFGServerObject::OnServerActivated(){ }
void UFGServerObject::OnServerDeactivated(){ }
bool UFGServerObject::IsServerClaimed() const{ return bool(); }
void UFGServerObject::GreetAsUnclaimedServer(){ }
FString UFGServerObject::PullCommandFromHistory(bool GoBackInTime){ return FString(); }
EServerComplexState UFGServerObject::GetComplexState() const{ return EServerComplexState(); }
bool UFGServerObject::IsClientConnectedToTheServer() const{ return bool(); }
void UFGServerObject::RegisterStateListener(TScriptInterface<IFGServerStateListener> Listener){ }
void UFGServerObject::UnRegisterStateListener(TScriptInterface<IFGServerStateListener> Listener){ }
UFGServerManager* UFGServerObject::GetOuterServerManager() const{ return nullptr; }
void UFGServerObject::PromptUserToAllowCertificate(const FFGServerCertificate& NewServerCertificate){ }
bool UFGServerObject::DiscardServerCertificate(){ return bool(); }
void UFGServerObject::OnServerAPIError(const FFGServerErrorResponse& ErrorResponse){ }
void UFGServerObject::ShowServerMessage(EServerMessage ServerMessage) const{ }
void UFGServerObject::OnServerAddedOrLoaded(){ }
void UFGServerObject::OnServerRemoved(){ }
void UFGServerObject::Tick(float DeltaTime){ }
void UFGServerObject::SetupServer(const FString& Hostname, int32 QueryPort, const TArray<TSharedPtr<FInternetAddr>>& ResolvedQueryAddress){ }
void UFGServerObject::ProcessServerStatePollResponse(const FServerStatePollResponse& PollResponse){ }
void UFGServerObject::AttemptApplySettings(const UFGServerObjectOptionAdapter* OptionAdapter, const TMap<FString, FString>& ChangedSettings) const{ }
EServerComplexState UFGServerObject::GetComplexState_Playing() const{ return EServerComplexState(); }
EServerComplexState UFGServerObject::GetComplexState_Idle() const{ return EServerComplexState(); }
void UFGServerObject::ProcessDirtySubStateBits(){ }
void UFGServerObject::OnGameStateReceived(const FFGServerErrorResponse& ErrorResponse, const FServerGameState& NewState){ }
void UFGServerObject::SetGameState(const FServerGameState& NewState){ }
void UFGServerObject::OnServerQueryAddressResolved(const TArray<TSharedPtr<FInternetAddr>>& ResolvedQueryAddress){ }
void UFGServerObject::OnHealthCheckResult(const FFGServerErrorResponse& HealthCheckResult, const FString& ServerCustomData){ }
void UFGServerObject::OnConsoleCommandOutputReceived(const FString& ConsoleCommandOutput){ }
void UFGServerObject::OnPasswordlessLoginCompleted(FFGServerErrorResponse& ErrorResponse, EPrivilegeLevel MinPrivilegeLevel, FServerAuthenticationToken InAuthenticationToken, bool bAutomaticLogin){ }
void UFGServerObject::OnPasswordLoginCompleted(FFGServerErrorResponse& ErrorResponse, EPrivilegeLevel MinPrivilegeLevel, FServerAuthenticationToken InAuthenticationToken){ }
void UFGServerObject::OnCreateGameResponse(const FFGServerErrorResponse& ErrorResponse){ }
void UFGServerObject::OnLoadGameResponse(const FFGServerErrorResponse& ErrorResponse){ }
void UFGServerObject::OnJoinRequestResponse(const FFGServerErrorResponse& ErrorResponse, const FFGServerJoinDataResponse& ServerJoinData){ }
void UFGServerObject::OnServerOptionsUpdated(const FFGServerErrorResponse& ErrorResponse, const TMap<FString, FString>& NewServerOptions, const TMap<FString, FString>& PendingServerOptions){ }
void UFGServerObject::OnAdvancedGameSettingsUpdated(const FFGServerErrorResponse& ErrorResponse, const TMap<FString, FString>& NewAdvancedGameSettings, bool bCreativeModeEnabled){ }
void UFGServerObject::OnLoginTokenVerificationFinished(FFGServerErrorResponse& ErrorResponse, EPrivilegeLevel MinPrivilegeLevel, bool bAutomaticLogin){ }
void UFGServerObject::OnServerClaimResponse(FFGServerErrorResponse& ErrorResponse, const FString& NewAuthenticationToken){ }
void UFGServerObject::OnAdminPasswordSetResponse(const FString& NewAuthenticationToken){ }
void UFGServerObject::OnClientJoinPasswordSet(const FString& NewClientJoinPassword){ }
void UFGServerObject::OnAdminPasswordSet(const FString& NewAdminPassword){ }
void UFGServerObject::OnAdminPasswordSetAndServerClaimed(const FString& NewAdminPassword){ }
void UFGServerObject::OnServerClaimed(const FString& NewServerName){ }
void UFGServerObject::OnEnumerateSaveSessionsCompleted(const FFGServerErrorResponse& ErrorResponse, const TArray<FSessionSaveStruct>& Sessions, int32 CurrentSessionIndex){ }
void UFGServerObject::OnUploadSaveGameComplete(FFGServerErrorResponse& ServerResponse, FOnSaveManagerTransferCompleted CompleteDelegate){ }
void UFGServerObject::OnDownloadSaveGameComplete(FFGServerErrorResponse& ServerResponse, const TSharedPtr<FFGRequestPayload>& SaveGamePayload, FOnSaveManagerTransferCompleted CompleteDelegate){ }
void UFGServerObject::SetServerName(const FString& NewServerName){ }
void UFGServerObject::ServerSavesUpdated() const{ }
void UFGServerObject::PollState(){ }
void UFGServerObject::NotifyComplexStateChange(){ }
void UFGServerObject::SetServerState(EServerState NewState){ }
void UFGServerObject::SetServerAPIState(EFGServerAPIState NewServerAPIState){ }
void UFGServerObject::SetAuthenticationToken(const FServerAuthenticationToken& Token){ }
void UFGServerObject::AbortAuthenticationFlow(const FFGServerErrorResponse& Reason){ }
void UFGServerObject::OnUserPasswordRequestCompleted(const FString& Password, EPrivilegeLevel MinimumTargetPrivilege){ }
void UFGServerObject::OnUserPasswordRequestCancelled(){ }
void UFGServerObject::OnUserAcceptedRemoteCertificate(FFGServerCertificate ServerCertificate){ }
void UFGServerObject::OnUserDeclinedRemoteCertificate(){ }
void UFGServerObject::OnAuthenticationTokenChanged(){ }
void UFGServerObject::RequestPassword(EPrivilegeLevel MinPrivilegeLevel){ }
bool UFGServerObject::CheckVersionCompatibility() const{ return bool(); }
void UFGServerObject::SaveState() const{ }
bool UFGServerObject::IsPollingServerState(){ return bool(); }
void UFGServerObject::PurgeDeadListeners(){ }
void IFGServerStateListener::NativeOnServerStateChanged(UFGServerObject* Server, EServerState State){ }
void IFGServerStateListener::NativeOnServerGameStateChanged(UFGServerObject* Server, const FServerGameState& GameState){ }
void IFGServerStateListener::NativeOnServerAPIStateChanged(UFGServerObject* Server, EFGServerAPIState ServerAPIState){ }
void IFGServerStateListener::NativeOnServerAuthenticationChanged(UFGServerObject* Server, const FServerAuthenticationToken& AuthToken){ }
void IFGServerStateListener::NativeOnServerRenamed(UFGServerObject* Server, const FString& Name){ }
void IFGServerStateListener::NativeOnServerComplexStateChanged(UFGServerObject* Server, EServerComplexState State){ }
void IFGServerStateListener::NativeOnNewServerConsoleOutput(UFGServerObject* Server, const FString& NewOutput){ }
