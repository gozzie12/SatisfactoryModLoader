// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGServerManager.h"

DEFINE_LOG_CATEGORY(LogServerManager);

FServerManagerSaveHeader::FServerManagerSaveHeader(){ }
void FServerManagerSaveHeader::Serialize(FArchive& Ar){ }
#if WITH_EDITOR
void UFGServerManager::OnPendingNetGameConnectionCreated(UPendingNetGame* PendingNetGame){ }
void UFGServerManager::OnHandleDisconnect( UWorld* InWorld,  UNetDriver* NetDriver){ }
void UFGServerManager::SetPendingClientTravelToDS(FString AbsoluteTravelURL){ }
void UFGServerManager::OnLocalPIEServerAddedOrFound(UFGServerObject* ServerObject, bool bServerAdded){ }
#endif 
UFGServerManager::UFGServerManager(){ }
void UFGServerManager::Initialize(FSubsystemCollectionBase& Collection){ }
void UFGServerManager::Deinitialize(){ }
bool UFGServerManager::ShouldCreateSubsystem(UObject* Outer) const{ return bool(); }
bool UFGServerManager::Tick(float DeltaTime){ return bool(); }
void UFGServerManager::Serialize(FArchive& Ar){ Super::Serialize(Ar); }
int32 UFGServerManager::GetClientNetCL(){ return int32(); }
bool UFGServerManager::IsClientModded(){ return bool(); }
const TArray<UFGServerObject*> UFGServerManager::GetServers() const{ return TArray<UFGServerObject*>(); }
UFGServerObject* UFGServerManager::GetServerByHostname(const FString& Hostname, int32 QueryPort){ return nullptr; }
void UFGServerManager::FindServersByAddress(const TSharedPtr<FInternetAddr>& Address, TArray<UFGServerObject*>& OutServers){ }
void UFGServerManager::AddServer(const FString& Address, int32 Port, const FOnServerAddedOrFoundDelegate& LocalOnServerAdded, const FOnServerNotAddedDelegate& OnServerNotAdded, bool bTransient){ }
void UFGServerManager::RemoveServer(UFGServerObject* Server){ }
TScriptInterface<IFGDedicatedServerUIProxy> UFGServerManager::MakeServerInteractionHandler(){ return TScriptInterface<IFGDedicatedServerUIProxy>(); }
void UFGServerManager::SendQueryToAddress(const TSharedPtr<FInternetAddr>& ServerAddress){ }
void UFGServerManager::ResolveQueryAddressForServer(const FString& Hostname, int32 Port, const FOnServerAddressResolved& OnServerAddressResolved){ }
bool UFGServerManager::SaveServerManagerSaveGame(){ return bool(); }
void UFGServerManager::AddServerInternal(const TArray<TSharedPtr<FInternetAddr>>& ResolvedQueryAddresses, FString Hostname, int32 FallbackPort, FOnServerAddedOrFoundDelegate LocalOnServerAdded, FOnServerNotAddedDelegate OnServerNotAdded, bool bTransient){ }
void UFGServerManager::CreateLocalQuerySockets(){ }
void UFGServerManager::DestroyLocalQuerySockets(){ }
bool UFGServerManager::LoadServerManagerSaveGame(){ return bool(); }
void UFGServerManager::ProcessPendingQueryResponses(){ }
