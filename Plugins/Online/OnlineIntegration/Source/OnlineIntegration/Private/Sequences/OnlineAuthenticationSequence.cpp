// This file has been automatically generated by the Unreal Header Implementation tool

#include "Sequences/OnlineAuthenticationSequence.h"

void UOnlineAuthenticationSequence::Initialize(FPlatformUserId PlatformUserId){ }
void UOnlineAuthenticationSequence::Start(FOnOnlineAsyncOperationCompleted_Native::FDelegate&& CompleteDelegate){ }
bool UOnlineAuthenticationSequence::HasErrors() const{ return bool(); }
void UOnlineAuthenticationSequence::OverridePerObjectConfigSection(FString& SectionName){ }
void UOnlineAuthenticationSequence::InitializeUser(){ }
EConditionalLoopResult UOnlineAuthenticationSequence::LoginLoop(TSharedRef<FConditionalLoop> LoopNodeRef){ return EConditionalLoopResult(); }
EConditionalLoopResult UOnlineAuthenticationSequence::BackendLoginLoop(TSharedRef<FConditionalLoop> LoopNodeRef){ return EConditionalLoopResult(); }
void UOnlineAuthenticationSequence::QueryExternalAuthToken(TSharedRef<FControlFlowNode> FlowNodeRef, FString CustomValue, FName ServiceProvider){ }
void UOnlineAuthenticationSequence::LoginToProvider(TSharedRef<FControlFlowNode> FlowNodeRef, FName LoginType, FName ServiceProvider){ }
void UOnlineAuthenticationSequence::LogoutFromProvider(TSharedRef<FControlFlowNode> FlowNodeRef, FName ServiceProvider, bool bForgetAuth){ }
void UOnlineAuthenticationSequence::SetLoginPendingFlag(UOnlineIntegrationBackend* Backend, bool bSet){ }
void UOnlineAuthenticationSequence::NotifyProgressUpdate(const FText& Update){ }
void UOnlineAuthenticationSequence::AuthenticationCompleted(){ }
void UOnlineAuthenticationSequence::ResetLoginTypeIndex(){ }
void UOnlineAuthenticationSequence::IncrementBackendIndex(){ }
void UOnlineAuthenticationSequence::IncrementLoginTypeIndex(){ }
